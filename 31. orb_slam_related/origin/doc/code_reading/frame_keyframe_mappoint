=============================== Frame ==============================================

Frame 
    |__ 重要member var 记述
        |__ mnId        从nNextId 计算而来
        |__ N           ctor中提取的特征数量(左目ORB)
        |__ mvKey       左目ORB
        |__ mvKeysRight 友目ORB
        |__ mvKeysUn    去畸变之后的ORB
        |__ mvDepth     左目ORB 深度信息
        |__ mvuRight    存储了左目像素点在右目中的对应点的横坐标，因为纵坐标相同 ?? 上下冲突 需要之后再仔细地看一下
                        mvuRight中存放着双目的深度值，如果不是双目，其值将为-1 
                        最后发现对于不同的相机类型，保存的内容不同
                        
        |__ mvpMapPoints 存储指针的vector 写法值得学习
                         这个主要是在Track当中用于保存匹配的点的关系
        |__ mvbOutlier  outlier点 主要是用于optimizer中，也在optimizer 中更新 Outlier的话这个会变为false
                        ？？ 这里还包含了一些结合OPtimizer 的逻辑 留待之后进行梳理
                        
        |__ mnMinX/mnMaxX/mnMinY/mnMaxY   去畸变之后的图像边界
        |__ mGrid       存储20个格子里面带有的ORB特征的index 在TrackMotion 的mfGetFeaturesInArea() 中使用
        |__ mBowVec     词袋模型相关
        |__ mFeatVec
        |__ mDescriptors\mDescriptorsRight ORB描述子
    |__ mfctor        进行特征提取
                      frame 的ctor有多个 可以进行单双目的ORB特征提取
        |__ mfextractORB()           双线程进行提取，class member func 的线程写法值得学习
        |__ mfUndistortKeyPoints()   用畸变参数矫正ORB特征点坐标
        |__ mfComputeImageBounds()   计算去畸变之后的图像边界
        |__ mfAssignFeaturesToGrid()
    |__ mfComputeBoW()
    |__ mfSetPose()                  设置T_c_w
        |__ UpdatePoseMatrices()     
    |__ mfisInFrustum(MP)            根据点的深度正负性、距离、观测角度，
                                     判断这个MP 是否在视野中           
    |__ mfGetFeaturesInArea()        找到在 以x,y为中心,
                                     半径为r的圆形内且在[minLevel, maxLevel]的特征点
                                     在TrackMotion的时候使用

tips：普通的Frame是没有共视帧这个东西的

Frame流程
    |__ Tracking GrabImageStereo 产生
    |__ track() 之后结束

内部member var 只是在 Tracking 中使用
mvpMapPoints 
    |__ Frame ctor 中被初始化
    |__ 在TrackMotion/TrackKF 中被添加，添加的就是KF和LastFrame中的地图点
    |__ 在TrackMotion/TrackKF 的被添加，对于Outlier 会对 mbOutlier be false
    |__ 在TrackLocalMap 中被进一步添加,在这里就有可能引入了一些原本没有观测的点


================================ KeyFrame ============================================

KeyFrame
    |__ 重要member var 记述 
        |__ mnId          从nNextId 计算而来,但是和Frame的nNextId 并不是一个
        |__ mvpOrderedConnectedKeyFrames       根据权重排序之后的关键帧和权重
        |__ mvOrderedWeights
        |__ mConnectedKeyFrameWeights          目前所有有连接关系的Keyframe和weight
        |__ mvpMapPoints                       所有的地图点
        |__ mspLoopEdges                       存储和这个关键帧相关的
                                               用于回环的关键帧
        |__ mnTrackReferenceForFrame           包含对于哪一帧是LocalKeyFrame 的信息
    |__ mfctor(Frame，Map，KeyFrameDatabase)    转移Frame 的Grid
                                               设置位姿为Frame 的位姿
        |__ mfSetPose()
    |__ 多个mfGet...()
    |__ mfComputeBoW()
    |__ keyframe_related
        |__ mfAddConnection(KF,weight)             建立两个关键帧之间的关系
            |__ mfUpdateBestCovisibles()           按照权重对连接的关键帧进行排序
        |__ mfGetConnectedKeyFrames()              没有进行排序的
        |__ mfGetVectorCovisibleKeyFrames()        排序过的
        |__ mfGetBestCovisibilityKeyFrames(N)      得到排序过的前N个关键帧
        |__ mfGetCovisiblesByWeight(weight)        
    |__ mappoint_related
        |__ mfAddMapPoint()
        |__ mfEraseMapPointMatch()
        |__ mfReplaceMapPointMatch()
        |__ mfGetMapPoints()
        |__ mfTrackedMapPoints(minObs)             得到大于minObs次观测的地图点
        |__ mfGetMapPoint(idx)
    |__ connect_related
        |__ mfUpdateConnections()                  对非排序的KF和weight进行排序
            |__ catchAllMPinKF()                   获得当前所有的地图点
            |__ buildCovisualityToOtherKF()        通过对于MapPoint的共同观测，
                                                   统计同其他KF 的共视强度
            |__ mfAddConnection(KF,weight)         共视强度大于th ，就调用AddConnection
                                                   建立关系
            |__ update(Un)OrderStructure()         更新mConnectedKeyFrameWeights
                                                   和 mvpOrderedConnectedKeyFrames
                                                   和 mvOrderedWeights 的信息
                                                   mConnectedKeyFrameWeights 存储所有的共视关键帧
                                                   mvpOrderedConnectedKeyFrames 存储强度大于th 的共视关键帧
            |__ updateTree()                       ? 目前不知道是做什么用的
        |__ mfAddChild()
        |__ mfEraseChild()
        |__ mfChangeParent()
        |__ mfGetChilds()
        |__ mfGetParent()
        |__ mfEraseConnection(KF)                  删除和其他关键帧的关系
    |__ loop_related
        |__ mfAddLoopEdge()
        |__ mfGetLoopEdges()
        |__ mfSetNotErase()
        |__ mfSetErase()
            |__ mfSetBadFlag()
        |__ mfSetBadFlag()                      把整个关键帧彻底摸除
            |__ EraseConnectWithOtherKF()
            |__ EraseConnectWithAllMP()
            |__ ChangeChilds'Parent()
            |__ clearDataInMapAndFrameDB()
    |__ others
        |__ mfGetFeaturesInArea()               和Frame 相同
        |__ mfUnprojectStereo()                 ORB特征点投影到世界坐标系下

KeyFrame
    |__ 在Tracking中 CreateNewKeyFrame() 创建
    |__ 连接关系在LocalMapper中 被经常更新

================================ MapPoint ============================================
MapPoint
    |__ 重要member var 记述
        |__ nNextId
        |__ mNormalVector        平均观测方向 相机坐标系下
        |__ mWorldPos            世界中的坐标
        |__ mfMaxDistance        ORB 最大最小匹配范围
        |__ mfMinDistance
        |__ mDescriptor          ORB 对应描述子
        |__ mpRefKF              第一个创建这个MapPoint 的KF
        |__ mObservations        map<KF*,idx> 保存KF* 和 KF内对应mvMapPoint 的idx
        |__ mnTrackReferenceForFrame    意义同KeyFrame 中的mnTrackReferenceForFrame 在LocalMap 匹配中使用
    |__ mfctor1()
    |__ mfctor2()                
    |__ Get/Set_related
        |__ mfSetWorldPos()
        |__ mfGetWorldPos()
        |__ mfGetNormal()
        |__ mfGetReferenceKeyFrame()
        |__ mfGetObservations()
        |__ mfObservations()        获得被观测的次数
    |__ mainInterface
        |__ mfAddObservation(KF,idx)      添加观测
        |__ mfEraseObservation(KF)    
            |__ mfSetBagFlag()            彻底删除这个MapPoint
                |__ EraseMapPointMatchForAllCo  

MapPoint
    |__ 也是在 Tracking CreateNewKeyFrame 的时候被创建
    |__ 在Tracking中 StereoInitialization() 创建
    |__ 在Tracking中 UpdateLastFrame() 创建 如果MapPoint 少于100 个 就使用最近的点 临时创造100个出来用于后面的匹配
        这也就是为什么在CreateNewKeyFrame的时候会存在是不是临时点的判断 
    |__ 在LocalMapper　中CreateNewMapPoint() 中 创建，mCurrentKeyFrame 和之前的KF对一个点有了观测，就重新创建这个MapPoint